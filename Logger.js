/// <summary>
/// A Simple Logger that is tied to Cocos2D
/// 
/// Based on a pattern in http://addyosmani.com/resources/essentialjsdesignpatterns/book/.
/// 
/// TODO How do we inherit from Asset?
/// </summary>
///
/// <returns>
/// An instance of this Logger class.
/// </returns>
function Logger() {

    /// <summary>
    /// Manager for asset.
    /// </summary>
    var assetManager = AssetManager.getInstance();

    /// <summary>
    /// Backing field for the unique identifier.
    /// </summary>
    var _sId = "";

    /// <summary>
    /// Read-only property, returns name of this class.
    /// 
    /// See http://blog.magnetiq.com/post/514962277/finding-out-class-names-of-javascript-objects.
    /// </summary>
    ///
    /// <param name="this">    this. </param>
    /// <param name=""class""> The "class". </param>
    Object.defineProperty(this, "class", {
        enumerable: true,
        configurable: true,
        get: function () {
            if (this && this.constructor && this.constructor.toString) {
                var arr = this.constructor.toString().match(
                    /function\s*(\w+)/);

                if (arr && arr.length == 2) {
                    return arr[1];
                }
            }

            return undefined;
        },
    });

    /// <summary>
    /// The constructed object (must be after all methods but before the _init definition and call).
    /// </summary>
    var result = {
        // User native JavaScript logging if present.
        // 
        log: function _log(msg) {
            if (console && console.log) {
                console.log("[RAGE]: " + msg);
            }
        }
    }

    /// <summary>
    /// Readonly Class Property, returns the class.
    /// </summary>
    ///
    /// <param name="result">  The result. </param>
    /// <param name=""class""> The "class". </param>
    Object.defineProperty(result, "class", {
        writable: false,
        enumerable: true,
        configurable: true,
        value: this.class,
    });

    /// <summary>
    /// Id Property, returns unique id returned by AssetManager.
    /// </summary>
    ///
    /// <param name="result"> The result. </param>
    /// <param name=""id"">   The "id". </param>
    Object.defineProperty(result, "id", {
        enumerable: true,
        configurable: true,
        get: function () {
            return _sId;
        },
        set: function (aId) {
            if (_sId.length == 0) {
                _sId = aId;
            }
        },
    });

    /// <summary>
    /// Register with the AssetManager and Set the Id.
    /// </summary>
    ///
    /// <param name="claz"> The class name of this class. </param>
    ///
    /// <returns>
    /// The unique identifier generated by the asset manager during registration.
    /// </returns>
    _init = function (claz) {
        // This call registers the instance and sets it's id.
        // 
        return assetManager.registerAssetInstance(result, claz);
    }

    _init(result.class);

    // Test code to see if id and class can be still changed (should not happen).
    // 
    //result.id = "XYYZ";
    //result.class = "test";

    //cc.log("Class: " + result.class);
    //cc.log("Id: " + result.id);

    return result;
}
